
Mock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800349c  0800349c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003514  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003514  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a38e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e6  00000000  00000000  0003a42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0003d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c19  00000000  00000000  0003e290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d95b  00000000  00000000  00064ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df95c  00000000  00000000  00072804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000417c  00000000  00000000  001521b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033c8 	.word	0x080033c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080033c8 	.word	0x080033c8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN6ngtech5Print5writeEPKc>:

		int getWriteError() {return write_error;}
		void clearWriteError() {setWriteError(0); }

		size_t write(uint8_t);    //pure virtual function ABC
		size_t write(const char *str) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
			if (str == NULL) return 0;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d101      	bne.n	80004fc <_ZN6ngtech5Print5writeEPKc+0x14>
 80004f8:	2300      	movs	r3, #0
 80004fa:	e00a      	b.n	8000512 <_ZN6ngtech5Print5writeEPKc+0x2a>
			return (write((const uint8_t*)str, strlen(str) ));
 80004fc:	6838      	ldr	r0, [r7, #0]
 80004fe:	f7ff fe69 	bl	80001d4 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	6839      	ldr	r1, [r7, #0]
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f807 	bl	800051c <_ZN6ngtech5Print5writeEPKhj>
 800050e:	4603      	mov	r3, r0
 8000510:	bf00      	nop
		}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <_ZN6ngtech5Print5writeEPKhj>:
extern UART_HandleTypeDef huart2;

using namespace ngtech;

size_t Print::write(const uint8_t *buffer, size_t size)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
//
//		else break;
//	}
//	return n;

	HAL_UART_Transmit(&huart2, buffer, size, 100);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	2364      	movs	r3, #100	; 0x64
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <_ZN6ngtech5Print5writeEPKhj+0x24>)
 8000532:	f002 f89f 	bl	8002674 <HAL_UART_Transmit>
	return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000008c 	.word	0x2000008c

08000544 <_ZN6ngtech5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
}



size_t Print::print(const string & buffer)
{
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	return write((uint8_t *)buffer.c_str(), buffer.length() );
 800054e:	6838      	ldr	r0, [r7, #0]
 8000550:	f002 fd95 	bl	800307e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000554:	4604      	mov	r4, r0
 8000556:	6838      	ldr	r0, [r7, #0]
 8000558:	f002 fd8f 	bl	800307a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	4621      	mov	r1, r4
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff ffda 	bl	800051c <_ZN6ngtech5Print5writeEPKhj>
 8000568:	4603      	mov	r3, r0
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}
	...

08000574 <_ZN6ngtech5Print7printlnEv>:
  return printFloat(n, digits);
}


size_t Print::println(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  return write("\r\n");
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <_ZN6ngtech5Print7printlnEv+0x1c>)
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff ffb2 	bl	80004e8 <_ZN6ngtech5Print5writeEPKc>
 8000584:	4603      	mov	r3, r0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	080033e0 	.word	0x080033e0

08000594 <_ZN6ngtech5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

size_t Print::println(const string &s)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  size_t n = print(s);
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffcf 	bl	8000544 <_ZN6ngtech5Print5printERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80005a6:	60f8      	str	r0, [r7, #12]
  n += println();
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffe3 	bl	8000574 <_ZN6ngtech5Print7printlnEv>
 80005ae:	4602      	mov	r2, r0
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4413      	add	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  return n;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <_ZN4GPIOC1EP12GPIO_TypeDeft9Direction>:
  */

#include "gpio.h"


GPIO::GPIO(GPIO_TypeDef* port, uint16_t Pin, Direction Dir) : gpio_port(port), gpio_pin(Pin)
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	460b      	mov	r3, r1
 80005d0:	80fb      	strh	r3, [r7, #6]
 80005d2:	4613      	mov	r3, r2
 80005d4:	717b      	strb	r3, [r7, #5]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	88fa      	ldrh	r2, [r7, #6]
 80005e0:	809a      	strh	r2, [r3, #4]
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]


  /*Configure GPIO pin : PC8 */
    GPIO_InitStruct.Pin = Pin;
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	617b      	str	r3, [r7, #20]
    if (Dir == IN)
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <_ZN4GPIOC1EP12GPIO_TypeDeft9Direction+0x42>
    {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	e003      	b.n	800060a <_ZN4GPIOC1EP12GPIO_TypeDeft9Direction+0x4a>
    }
    else
    {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
    }
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	68b8      	ldr	r0, [r7, #8]
 8000616:	f000 fc3b 	bl	8000e90 <HAL_GPIO_Init>

}
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4618      	mov	r0, r3
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_ZN4GPIO12digitalWriteEb>:

void GPIO::digitalWrite(const bool state)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
    if (state == LOW)
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <_ZN4GPIO12digitalWriteEb+0x24>
   HAL_GPIO_WritePin(gpio_port,gpio_pin, GPIO_PIN_RESET);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f000 fdb7 	bl	80011b4 <HAL_GPIO_WritePin>
   else{
    HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
   }
}
 8000646:	e007      	b.n	8000658 <_ZN4GPIO12digitalWriteEb+0x34>
    HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	889b      	ldrh	r3, [r3, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	f000 fdae 	bl	80011b4 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <_ZN4GPIO11digitalReadEv>:

const bool GPIO::digitalRead(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	bool readValue;
	readValue = HAL_GPIO_ReadPin(gpio_port, gpio_pin);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f000 fd86 	bl	8001184 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf14      	ite	ne
 800067e:	2301      	movne	r3, #1
 8000680:	2300      	moveq	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
	return readValue;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN6ngtech5Print13setWriteErrorEi>:
		void setWriteError(int err = 1) {write_error = err; }
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_ZN6ngtech5PrintC1Ev>:
		Print() {setWriteError(0); }     //Note the use of the constructor
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	2100      	movs	r1, #0
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ffea 	bl	800068e <_ZN6ngtech5Print13setWriteErrorEi>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fa5b 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f845 	bl	800075c <_Z18SystemClock_Configv>

  /* USER CODE END SysInit */
  using namespace ngtech;

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 f8d7 	bl	8000884 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80006d6:	f000 f8a1 	bl	800081c <_ZL19MX_USART2_UART_Initv>
 std::string voice = "hello my neighbourx";
 80006da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fc91 	bl	8003006 <_ZNSaIcEC1Ev>
 80006e4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4919      	ldr	r1, [pc, #100]	; (8000754 <main+0x90>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fcec 	bl	80030cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fc85 	bl	8003008 <_ZNSaIcED1Ev>
  /* USER CODE BEGIN 2 */
  //  /*Configure GPIO pin Output Level */
    GPIO LED(LD4_GPIO_Port, LD4_Pin, OUT);
 80006fe:	f107 000c 	add.w	r0, r7, #12
 8000702:	2301      	movs	r3, #1
 8000704:	2220      	movs	r2, #32
 8000706:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800070a:	f7ff ff59 	bl	80005c0 <_ZN4GPIOC1EP12GPIO_TypeDeft9Direction>
    GPIO BUTTON(B1_GPIO_Port, B1_Pin, IN);
 800070e:	1d38      	adds	r0, r7, #4
 8000710:	2300      	movs	r3, #0
 8000712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000716:	4910      	ldr	r1, [pc, #64]	; (8000758 <main+0x94>)
 8000718:	f7ff ff52 	bl	80005c0 <_ZN4GPIOC1EP12GPIO_TypeDeft9Direction>
    Print dataout;
 800071c:	463b      	mov	r3, r7
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffc3 	bl	80006aa <_ZN6ngtech5PrintC1Ev>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  LED.digitalWrite(BUTTON.digitalRead());
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff9a 	bl	8000660 <_ZN4GPIO11digitalReadEv>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff74 	bl	8000624 <_ZN4GPIO12digitalWriteEb>

	  dataout.println(voice);
 800073c:	f107 0214 	add.w	r2, r7, #20
 8000740:	463b      	mov	r3, r7
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff25 	bl	8000594 <_ZN6ngtech5Print7printlnERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	  HAL_Delay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074e:	f000 fa95 	bl	8000c7c <HAL_Delay>
	  LED.digitalWrite(BUTTON.digitalRead());
 8000752:	e7e7      	b.n	8000724 <main+0x60>
 8000754:	080033f4 	.word	0x080033f4
 8000758:	48000800 	.word	0x48000800

0800075c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b096      	sub	sp, #88	; 0x58
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2244      	movs	r2, #68	; 0x44
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fd2e 	bl	80031cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800077e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000782:	f000 fd3d 	bl	8001200 <HAL_PWREx_ControlVoltageScaling>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000796:	f000 f8b1 	bl	80008fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fd6f 	bl	80012ac <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80007de:	f000 f88d 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f96a 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000810:	f000 f874 	bl	80008fc <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3758      	adds	r7, #88	; 0x58
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000860:	f001 feba 	bl	80025d8 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000874:	f000 f842 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000008c 	.word	0x2000008c
 8000880:	40004400 	.word	0x40004400

08000884 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 // GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <_ZL12MX_GPIO_Initv+0x74>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]


}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2268      	movs	r2, #104	; 0x68
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fc2b 	bl	80031cc <memset>
  if(huart->Instance==USART2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_UART_MspInit+0xb0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d13a      	bne.n	80009f6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000980:	2302      	movs	r3, #2
 8000982:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fac5 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000998:	f7ff ffb0 	bl	80008fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 80009a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a6:	6593      	str	r3, [r2, #88]	; 0x58
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0xb4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009cc:	230c      	movs	r3, #12
 80009ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fa4d 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3790      	adds	r7, #144	; 0x90
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8f2 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_kill>:

int _kill(int pid, int sig)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a76:	f002 fb69 	bl	800314c <__errno>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_exit>:

void _exit (int status)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a9e:	e7fe      	b.n	8000a9e <_exit+0x12>

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f002 fb3c 	bl	800314c <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20028000 	.word	0x20028000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	20000110 	.word	0x20000110
 8000b08:	20000130 	.word	0x20000130

08000b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff ffea 	bl	8000b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fafb 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fdaf 	bl	80006c4 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b74:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b7c:	2000012c 	.word	0x2000012c

08000b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_Init+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <HAL_Init+0x3c>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f000 f944 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 f80f 	bl	8000bc4 <HAL_InitTick>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	e001      	b.n	8000bb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb2:	f7ff fea9 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f941 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f919 	bl	8000e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000114 	.word	0x20000114

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000114 	.word	0x20000114

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff47 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff5c 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffb0 	bl	8000de4 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e154      	b.n	800114a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8146 	beq.w	8001144 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80a0 	beq.w	8001144 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6613      	str	r3, [r2, #96]	; 0x60
 8001010:	4b55      	ldr	r3, [pc, #340]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a53      	ldr	r2, [pc, #332]	; (800116c <HAL_GPIO_Init+0x2dc>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001046:	d019      	beq.n	800107c <HAL_GPIO_Init+0x1ec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a49      	ldr	r2, [pc, #292]	; (8001170 <HAL_GPIO_Init+0x2e0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d013      	beq.n	8001078 <HAL_GPIO_Init+0x1e8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a48      	ldr	r2, [pc, #288]	; (8001174 <HAL_GPIO_Init+0x2e4>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a47      	ldr	r2, [pc, #284]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a46      	ldr	r2, [pc, #280]	; (800117c <HAL_GPIO_Init+0x2ec>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_GPIO_Init+0x1dc>
 8001068:	2304      	movs	r3, #4
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800106c:	2307      	movs	r3, #7
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001070:	2303      	movs	r3, #3
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f aea3 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120e:	d130      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121c:	d038      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2232      	movs	r2, #50	; 0x32
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001244:	e002      	b.n	800124c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3b01      	subs	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	d102      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f2      	bne.n	8001246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126c:	d110      	bne.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e00f      	b.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127e:	d007      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40007000 	.word	0x40007000
 80012a4:	20000000 	.word	0x20000000
 80012a8:	431bde83 	.word	0x431bde83

080012ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f000 bc02 	b.w	8001ac4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c0:	4b96      	ldr	r3, [pc, #600]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ca:	4b94      	ldr	r3, [pc, #592]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80e4 	beq.w	80014aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4c>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	f040 808b 	bne.w	8001406 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	f040 8087 	bne.w	8001406 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f8:	4b88      	ldr	r3, [pc, #544]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_OscConfig+0x64>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e3d9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4b81      	ldr	r3, [pc, #516]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_RCC_OscConfig+0x7e>
 8001320:	4b7e      	ldr	r3, [pc, #504]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001328:	e005      	b.n	8001336 <HAL_RCC_OscConfig+0x8a>
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800132c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001336:	4293      	cmp	r3, r2
 8001338:	d223      	bcs.n	8001382 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fd8c 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3ba      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b70      	ldr	r3, [pc, #448]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	496d      	ldr	r1, [pc, #436]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136c:	4b6b      	ldr	r3, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4968      	ldr	r1, [pc, #416]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
 8001380:	e025      	b.n	80013ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001382:	4b66      	ldr	r3, [pc, #408]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a65      	ldr	r2, [pc, #404]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4960      	ldr	r1, [pc, #384]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a0:	4b5e      	ldr	r3, [pc, #376]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	495b      	ldr	r1, [pc, #364]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fd4c 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e37a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ce:	f000 fc81 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b51      	ldr	r3, [pc, #324]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	4950      	ldr	r1, [pc, #320]	; (8001520 <HAL_RCC_OscConfig+0x274>)
 80013e0:	5ccb      	ldrb	r3, [r1, r3]
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <HAL_RCC_OscConfig+0x278>)
 80013ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ee:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fbe6 	bl	8000bc4 <HAL_InitTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d052      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	e35e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d032      	beq.n	8001474 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800141a:	f7ff fc23 	bl	8000c64 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001422:	f7ff fc1f 	bl	8000c64 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e347      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b33      	ldr	r3, [pc, #204]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4930      	ldr	r1, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	492b      	ldr	r1, [pc, #172]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
 8001472:	e01a      	b.n	80014aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a28      	ldr	r2, [pc, #160]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001480:	f7ff fbf0 	bl	8000c64 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001488:	f7ff fbec 	bl	8000c64 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e314      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1dc>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d073      	beq.n	800159e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x21c>
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d10e      	bne.n	80014e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d063      	beq.n	800159c <HAL_RCC_OscConfig+0x2f0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d15f      	bne.n	800159c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e2f1      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x24c>
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_RCC_OscConfig+0x270>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e025      	b.n	8001544 <HAL_RCC_OscConfig+0x298>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d114      	bne.n	800152c <HAL_RCC_OscConfig+0x280>
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a02      	ldr	r2, [pc, #8]	; (800151c <HAL_RCC_OscConfig+0x270>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e013      	b.n	8001544 <HAL_RCC_OscConfig+0x298>
 800151c:	40021000 	.word	0x40021000
 8001520:	08003408 	.word	0x08003408
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004
 800152c:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a9f      	ldr	r2, [pc, #636]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b9d      	ldr	r3, [pc, #628]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9c      	ldr	r2, [pc, #624]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fb8a 	bl	8000c64 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fb86 	bl	8000c64 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e2ae      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	4b92      	ldr	r3, [pc, #584]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x2a8>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fb76 	bl	8000c64 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fb72 	bl	8000c64 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e29a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x2d0>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d060      	beq.n	800166c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x310>
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d119      	bne.n	80015ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d116      	bne.n	80015ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015bc:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_OscConfig+0x328>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e277      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	e040      	b.n	800166c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d023      	beq.n	800163a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f2:	4b6f      	ldr	r3, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6e      	ldr	r2, [pc, #440]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb31 	bl	8000c64 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff fb2d 	bl	8000c64 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e255      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	495f      	ldr	r1, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e018      	b.n	800166c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a5c      	ldr	r2, [pc, #368]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fb0d 	bl	8000c64 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fb09 	bl	8000c64 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e231      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d03c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01c      	beq.n	80016ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001680:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001686:	4a4a      	ldr	r2, [pc, #296]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fae8 	bl	8000c64 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fae4 	bl	8000c64 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e20c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ef      	beq.n	8001698 <HAL_RCC_OscConfig+0x3ec>
 80016b8:	e01b      	b.n	80016f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c0:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff facb 	bl	8000c64 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fac7 	bl	8000c64 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1ef      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ef      	bne.n	80016d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a6 	beq.w	800184c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10d      	bne.n	800172c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	; 0x58
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001728:	2301      	movs	r3, #1
 800172a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_RCC_OscConfig+0x508>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d118      	bne.n	800176a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_RCC_OscConfig+0x508>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001744:	f7ff fa8e 	bl	8000c64 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7ff fa8a 	bl	8000c64 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1b2      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x508>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x4d8>
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001782:	e029      	b.n	80017d8 <HAL_RCC_OscConfig+0x52c>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d115      	bne.n	80017b8 <HAL_RCC_OscConfig+0x50c>
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ac:	e014      	b.n	80017d8 <HAL_RCC_OscConfig+0x52c>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	4b9a      	ldr	r3, [pc, #616]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a99      	ldr	r2, [pc, #612]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c8:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a95      	ldr	r2, [pc, #596]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d016      	beq.n	800180e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fa40 	bl	8000c64 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fa3c 	bl	8000c64 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e162      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fe:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ed      	beq.n	80017e8 <HAL_RCC_OscConfig+0x53c>
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fa29 	bl	8000c64 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fa25 	bl	8000c64 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e14b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ed      	bne.n	8001816 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183a:	7ffb      	ldrb	r3, [r7, #31]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001844:	4a77      	ldr	r2, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	2b00      	cmp	r3, #0
 8001856:	d03c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001860:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001866:	4a6f      	ldr	r2, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff f9f8 	bl	8000c64 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001878:	f7ff f9f4 	bl	8000c64 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e11c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188a:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800188c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x5cc>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800189a:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800189c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a0:	4a60      	ldr	r2, [pc, #384]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff f9db 	bl	8000c64 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b2:	f7ff f9d7 	bl	8000c64 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ff      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80f3 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	f040 80c9 	bne.w	8001a78 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d12c      	bne.n	8001954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	3b01      	subs	r3, #1
 8001906:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d123      	bne.n	8001954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d11b      	bne.n	8001954 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d113      	bne.n	8001954 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d109      	bne.n	8001954 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d06b      	beq.n	8001a2c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d062      	beq.n	8001a20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0ac      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001974:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001976:	f7ff f975 	bl	8000c64 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff f971 	bl	8000c64 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e099      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x77c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019b6:	0212      	lsls	r2, r2, #8
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019be:	0852      	lsrs	r2, r2, #1
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0552      	lsls	r2, r2, #21
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ca:	0852      	lsrs	r2, r2, #1
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0652      	lsls	r2, r2, #25
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d6:	06d2      	lsls	r2, r2, #27
 80019d8:	430a      	orrs	r2, r1
 80019da:	4912      	ldr	r1, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f8:	f7ff f934 	bl	8000c64 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f930 	bl	8000c64 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e058      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_RCC_OscConfig+0x778>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1e:	e050      	b.n	8001ac2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e04f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d144      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a50:	f7ff f908 	bl	8000c64 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f904 	bl	8000c64 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e02c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x7ac>
 8001a76:	e024      	b.n	8001ac2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d01f      	beq.n	8001abe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f8eb 	bl	8000c64 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f8e7 	bl	8000c64 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e00f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4905      	ldr	r1, [pc, #20]	; (8001acc <HAL_RCC_OscConfig+0x820>)
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_OscConfig+0x824>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e001      	b.n	8001ac2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	feeefffc 	.word	0xfeeefffc

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0e7      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d910      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4970      	ldr	r1, [pc, #448]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cf      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d908      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4960      	ldr	r1, [pc, #384]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d04c      	beq.n	8001bec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0a6      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	4b54      	ldr	r3, [pc, #336]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d115      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e09a      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e08e      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e086      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f023 0203 	bic.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4943      	ldr	r1, [pc, #268]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bbc:	f7ff f852 	bl	8000c64 <HAL_GetTick>
 8001bc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc4:	f7ff f84e 	bl	8000c64 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e06e      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 020c 	and.w	r2, r3, #12
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d1eb      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d010      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d208      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	492b      	ldr	r1, [pc, #172]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d210      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 0207 	bic.w	r2, r3, #7
 8001c30:	4923      	ldr	r1, [pc, #140]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e036      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	4918      	ldr	r1, [pc, #96]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c88:	f000 f824 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	490b      	ldr	r1, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1fc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff89 	bl	8000bc4 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	08003408 	.word	0x08003408
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d121      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11e      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e005      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d24:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	e004      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d134      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d003      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0xac>
 8001d78:	e005      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7c:	617b      	str	r3, [r7, #20]
      break;
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d82:	617b      	str	r3, [r7, #20]
      break;
 8001d84:	e002      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	617b      	str	r3, [r7, #20]
      break;
 8001d8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	fb03 f202 	mul.w	r2, r3, r2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x108>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	0e5b      	lsrs	r3, r3, #25
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08003420 	.word	0x08003420
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	007a1200 	.word	0x007a1200

08001dec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000000 	.word	0x20000000

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e08:	f7ff fff0 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4904      	ldr	r1, [pc, #16]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08003418 	.word	0x08003418

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e34:	f7ff ffda 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0adb      	lsrs	r3, r3, #11
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4904      	ldr	r1, [pc, #16]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003418 	.word	0x08003418

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f9b6 	bl	80011e4 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	; 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9a6 	bl	80011e4 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	; 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f40:	d01a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f46:	d814      	bhi.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f50:	d10f      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5e:	e00c      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa44 	bl	80023f4 <RCCEx_PLLSAI1_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f70:	e003      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	74fb      	strb	r3, [r7, #19]
      break;
 8001f76:	e000      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f80:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	494e      	ldr	r1, [pc, #312]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f96:	e001      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 809e 	beq.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a39      	ldr	r2, [pc, #228]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fe3a 	bl	8000c64 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff2:	e009      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fe36 	bl	8000c64 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d902      	bls.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	74fb      	strb	r3, [r7, #19]
        break;
 8002006:	e005      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d15a      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002024:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01e      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	429a      	cmp	r2, r3
 8002034:	d019      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe fdf6 	bl	8000c64 <HAL_GetTick>
 8002078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	e00b      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fdf2 	bl	8000c64 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d902      	bls.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	74fb      	strb	r3, [r7, #19]
            break;
 8002092:	e006      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ec      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b6:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	7c7b      	ldrb	r3, [r7, #17]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b9e      	ldr	r3, [pc, #632]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a9d      	ldr	r2, [pc, #628]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f2:	4b98      	ldr	r3, [pc, #608]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f023 0203 	bic.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4994      	ldr	r1, [pc, #592]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f023 020c 	bic.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	498c      	ldr	r1, [pc, #560]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002136:	4b87      	ldr	r3, [pc, #540]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	4983      	ldr	r1, [pc, #524]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002158:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	497b      	ldr	r1, [pc, #492]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800217a:	4b76      	ldr	r3, [pc, #472]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4972      	ldr	r1, [pc, #456]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800219c:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	496a      	ldr	r1, [pc, #424]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021be:	4b65      	ldr	r3, [pc, #404]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021cc:	4961      	ldr	r1, [pc, #388]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ee:	4959      	ldr	r1, [pc, #356]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002202:	4b54      	ldr	r3, [pc, #336]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	4950      	ldr	r1, [pc, #320]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002224:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	4948      	ldr	r1, [pc, #288]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800224c:	f023 0203 	bic.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	493f      	ldr	r1, [pc, #252]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d028      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	4937      	ldr	r1, [pc, #220]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002286:	d106      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a31      	ldr	r2, [pc, #196]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	60d3      	str	r3, [r2, #12]
 8002294:	e011      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229e:	d10c      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f8a4 	bl	80023f4 <RCCEx_PLLSAI1_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d028      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	491f      	ldr	r1, [pc, #124]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e4:	d106      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f0:	60d3      	str	r3, [r2, #12]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	2101      	movs	r1, #1
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f875 	bl	80023f4 <RCCEx_PLLSAI1_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002342:	d109      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a02      	ldr	r2, [pc, #8]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
 8002350:	e014      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f843 	bl	80023f4 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01c      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	4916      	ldr	r1, [pc, #88]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	2102      	movs	r1, #2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f820 	bl	80023f4 <RCCEx_PLLSAI1_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002402:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d018      	beq.n	8002440 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800240e:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d10d      	bne.n	800243a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
       ||
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002426:	4b6b      	ldr	r3, [pc, #428]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
       ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d047      	beq.n	80024ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e044      	b.n	80024ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d018      	beq.n	800247a <RCCEx_PLLSAI1_Config+0x86>
 8002448:	2b03      	cmp	r3, #3
 800244a:	d825      	bhi.n	8002498 <RCCEx_PLLSAI1_Config+0xa4>
 800244c:	2b01      	cmp	r3, #1
 800244e:	d002      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x62>
 8002450:	2b02      	cmp	r3, #2
 8002452:	d009      	beq.n	8002468 <RCCEx_PLLSAI1_Config+0x74>
 8002454:	e020      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002456:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11d      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002466:	e01a      	b.n	800249e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002468:	4b5a      	ldr	r3, [pc, #360]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d116      	bne.n	80024a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e013      	b.n	80024a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800247a:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002486:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002496:	e006      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e004      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ae:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	430b      	orrs	r3, r1
 80024c4:	4943      	ldr	r1, [pc, #268]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d17c      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3f      	ldr	r2, [pc, #252]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024dc:	f7fe fbc2 	bl	8000c64 <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e2:	e009      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e4:	f7fe fbbe 	bl	8000c64 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	73fb      	strb	r3, [r7, #15]
        break;
 80024f6:	e005      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ef      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d15f      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d110      	bne.n	8002532 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002518:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6892      	ldr	r2, [r2, #8]
 8002520:	0211      	lsls	r1, r2, #8
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68d2      	ldr	r2, [r2, #12]
 8002526:	06d2      	lsls	r2, r2, #27
 8002528:	430a      	orrs	r2, r1
 800252a:	492a      	ldr	r1, [pc, #168]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252c:	4313      	orrs	r3, r2
 800252e:	610b      	str	r3, [r1, #16]
 8002530:	e027      	b.n	8002582 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d112      	bne.n	800255e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002540:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6892      	ldr	r2, [r2, #8]
 8002548:	0211      	lsls	r1, r2, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6912      	ldr	r2, [r2, #16]
 800254e:	0852      	lsrs	r2, r2, #1
 8002550:	3a01      	subs	r2, #1
 8002552:	0552      	lsls	r2, r2, #21
 8002554:	430a      	orrs	r2, r1
 8002556:	491f      	ldr	r1, [pc, #124]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
 800255c:	e011      	b.n	8002582 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002566:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	0211      	lsls	r1, r2, #8
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6952      	ldr	r2, [r2, #20]
 8002574:	0852      	lsrs	r2, r2, #1
 8002576:	3a01      	subs	r2, #1
 8002578:	0652      	lsls	r2, r2, #25
 800257a:	430a      	orrs	r2, r1
 800257c:	4915      	ldr	r1, [pc, #84]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800258c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fb69 	bl	8000c64 <HAL_GetTick>
 8002592:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002594:	e009      	b.n	80025aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002596:	f7fe fb65 	bl	8000c64 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d902      	bls.n	80025aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	73fb      	strb	r3, [r7, #15]
          break;
 80025a8:	e005      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e040      	b.n	800266c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe f9a8 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8c0 	bl	800279c <UART_SetConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e022      	b.n	800266c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fb3a 	bl	8002ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fbc1 	bl	8002dec <UART_CheckIdleState>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002688:	2b20      	cmp	r3, #32
 800268a:	f040 8082 	bne.w	8002792 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_UART_Transmit+0x26>
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07a      	b.n	8002794 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Transmit+0x38>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e073      	b.n	8002794 <HAL_UART_Transmit+0x120>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2221      	movs	r2, #33	; 0x21
 80026c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c2:	f7fe facf 	bl	8000c64 <HAL_GetTick>
 80026c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d108      	bne.n	80026f4 <HAL_UART_Transmit+0x80>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e003      	b.n	80026fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002704:	e02d      	b.n	8002762 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fbb4 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e039      	b.n	8002794 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002732:	b292      	uxth	r2, r2
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3302      	adds	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e008      	b.n	8002750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b292      	uxth	r2, r2
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1cb      	bne.n	8002706 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	; 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fb80 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e005      	b.n	8002794 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002792:	2302      	movs	r3, #2
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b08a      	sub	sp, #40	; 0x28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4ba5      	ldr	r3, [pc, #660]	; (8002a60 <UART_SetConfig+0x2c4>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a9a      	ldr	r2, [pc, #616]	; (8002a64 <UART_SetConfig+0x2c8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	4313      	orrs	r3, r2
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	430a      	orrs	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a91      	ldr	r2, [pc, #580]	; (8002a68 <UART_SetConfig+0x2cc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d126      	bne.n	8002874 <UART_SetConfig+0xd8>
 8002826:	4b91      	ldr	r3, [pc, #580]	; (8002a6c <UART_SetConfig+0x2d0>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b03      	cmp	r3, #3
 8002832:	d81b      	bhi.n	800286c <UART_SetConfig+0xd0>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <UART_SetConfig+0xa0>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	0800284d 	.word	0x0800284d
 8002840:	0800285d 	.word	0x0800285d
 8002844:	08002855 	.word	0x08002855
 8002848:	08002865 	.word	0x08002865
 800284c:	2301      	movs	r3, #1
 800284e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002852:	e0d6      	b.n	8002a02 <UART_SetConfig+0x266>
 8002854:	2302      	movs	r3, #2
 8002856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285a:	e0d2      	b.n	8002a02 <UART_SetConfig+0x266>
 800285c:	2304      	movs	r3, #4
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002862:	e0ce      	b.n	8002a02 <UART_SetConfig+0x266>
 8002864:	2308      	movs	r3, #8
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286a:	e0ca      	b.n	8002a02 <UART_SetConfig+0x266>
 800286c:	2310      	movs	r3, #16
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e0c6      	b.n	8002a02 <UART_SetConfig+0x266>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a7d      	ldr	r2, [pc, #500]	; (8002a70 <UART_SetConfig+0x2d4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d138      	bne.n	80028f0 <UART_SetConfig+0x154>
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <UART_SetConfig+0x2d0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d82d      	bhi.n	80028e8 <UART_SetConfig+0x14c>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <UART_SetConfig+0xf8>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028c9 	.word	0x080028c9
 8002898:	080028e9 	.word	0x080028e9
 800289c:	080028e9 	.word	0x080028e9
 80028a0:	080028e9 	.word	0x080028e9
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	080028e9 	.word	0x080028e9
 80028ac:	080028e9 	.word	0x080028e9
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028d1 	.word	0x080028d1
 80028b8:	080028e9 	.word	0x080028e9
 80028bc:	080028e9 	.word	0x080028e9
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	080028e1 	.word	0x080028e1
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ce:	e098      	b.n	8002a02 <UART_SetConfig+0x266>
 80028d0:	2302      	movs	r3, #2
 80028d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d6:	e094      	b.n	8002a02 <UART_SetConfig+0x266>
 80028d8:	2304      	movs	r3, #4
 80028da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028de:	e090      	b.n	8002a02 <UART_SetConfig+0x266>
 80028e0:	2308      	movs	r3, #8
 80028e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028e6:	e08c      	b.n	8002a02 <UART_SetConfig+0x266>
 80028e8:	2310      	movs	r3, #16
 80028ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ee:	e088      	b.n	8002a02 <UART_SetConfig+0x266>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <UART_SetConfig+0x2d8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d125      	bne.n	8002946 <UART_SetConfig+0x1aa>
 80028fa:	4b5c      	ldr	r3, [pc, #368]	; (8002a6c <UART_SetConfig+0x2d0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002904:	2b30      	cmp	r3, #48	; 0x30
 8002906:	d016      	beq.n	8002936 <UART_SetConfig+0x19a>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d818      	bhi.n	800293e <UART_SetConfig+0x1a2>
 800290c:	2b20      	cmp	r3, #32
 800290e:	d00a      	beq.n	8002926 <UART_SetConfig+0x18a>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d814      	bhi.n	800293e <UART_SetConfig+0x1a2>
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <UART_SetConfig+0x182>
 8002918:	2b10      	cmp	r3, #16
 800291a:	d008      	beq.n	800292e <UART_SetConfig+0x192>
 800291c:	e00f      	b.n	800293e <UART_SetConfig+0x1a2>
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002924:	e06d      	b.n	8002a02 <UART_SetConfig+0x266>
 8002926:	2302      	movs	r3, #2
 8002928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292c:	e069      	b.n	8002a02 <UART_SetConfig+0x266>
 800292e:	2304      	movs	r3, #4
 8002930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002934:	e065      	b.n	8002a02 <UART_SetConfig+0x266>
 8002936:	2308      	movs	r3, #8
 8002938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293c:	e061      	b.n	8002a02 <UART_SetConfig+0x266>
 800293e:	2310      	movs	r3, #16
 8002940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002944:	e05d      	b.n	8002a02 <UART_SetConfig+0x266>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <UART_SetConfig+0x2dc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d125      	bne.n	800299c <UART_SetConfig+0x200>
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <UART_SetConfig+0x2d0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800295a:	2bc0      	cmp	r3, #192	; 0xc0
 800295c:	d016      	beq.n	800298c <UART_SetConfig+0x1f0>
 800295e:	2bc0      	cmp	r3, #192	; 0xc0
 8002960:	d818      	bhi.n	8002994 <UART_SetConfig+0x1f8>
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d00a      	beq.n	800297c <UART_SetConfig+0x1e0>
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d814      	bhi.n	8002994 <UART_SetConfig+0x1f8>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <UART_SetConfig+0x1d8>
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d008      	beq.n	8002984 <UART_SetConfig+0x1e8>
 8002972:	e00f      	b.n	8002994 <UART_SetConfig+0x1f8>
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297a:	e042      	b.n	8002a02 <UART_SetConfig+0x266>
 800297c:	2302      	movs	r3, #2
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002982:	e03e      	b.n	8002a02 <UART_SetConfig+0x266>
 8002984:	2304      	movs	r3, #4
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e03a      	b.n	8002a02 <UART_SetConfig+0x266>
 800298c:	2308      	movs	r3, #8
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e036      	b.n	8002a02 <UART_SetConfig+0x266>
 8002994:	2310      	movs	r3, #16
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e032      	b.n	8002a02 <UART_SetConfig+0x266>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <UART_SetConfig+0x2c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12a      	bne.n	80029fc <UART_SetConfig+0x260>
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <UART_SetConfig+0x2d0>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029b4:	d01a      	beq.n	80029ec <UART_SetConfig+0x250>
 80029b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029ba:	d81b      	bhi.n	80029f4 <UART_SetConfig+0x258>
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c0:	d00c      	beq.n	80029dc <UART_SetConfig+0x240>
 80029c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c6:	d815      	bhi.n	80029f4 <UART_SetConfig+0x258>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <UART_SetConfig+0x238>
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d0:	d008      	beq.n	80029e4 <UART_SetConfig+0x248>
 80029d2:	e00f      	b.n	80029f4 <UART_SetConfig+0x258>
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029da:	e012      	b.n	8002a02 <UART_SetConfig+0x266>
 80029dc:	2302      	movs	r3, #2
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e2:	e00e      	b.n	8002a02 <UART_SetConfig+0x266>
 80029e4:	2304      	movs	r3, #4
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e00a      	b.n	8002a02 <UART_SetConfig+0x266>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e006      	b.n	8002a02 <UART_SetConfig+0x266>
 80029f4:	2310      	movs	r3, #16
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e002      	b.n	8002a02 <UART_SetConfig+0x266>
 80029fc:	2310      	movs	r3, #16
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <UART_SetConfig+0x2c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	f040 808b 	bne.w	8002b24 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d834      	bhi.n	8002a80 <UART_SetConfig+0x2e4>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <UART_SetConfig+0x280>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a81 	.word	0x08002a81
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002a81 	.word	0x08002a81
 8002a2c:	08002a4f 	.word	0x08002a4f
 8002a30:	08002a81 	.word	0x08002a81
 8002a34:	08002a81 	.word	0x08002a81
 8002a38:	08002a81 	.word	0x08002a81
 8002a3c:	08002a57 	.word	0x08002a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a40:	f7ff f9e0 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002a44:	61f8      	str	r0, [r7, #28]
        break;
 8002a46:	e021      	b.n	8002a8c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <UART_SetConfig+0x2e0>)
 8002a4a:	61fb      	str	r3, [r7, #28]
        break;
 8002a4c:	e01e      	b.n	8002a8c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a4e:	f7ff f941 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8002a52:	61f8      	str	r0, [r7, #28]
        break;
 8002a54:	e01a      	b.n	8002a8c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5a:	61fb      	str	r3, [r7, #28]
        break;
 8002a5c:	e016      	b.n	8002a8c <UART_SetConfig+0x2f0>
 8002a5e:	bf00      	nop
 8002a60:	efff69f3 	.word	0xefff69f3
 8002a64:	40008000 	.word	0x40008000
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40004400 	.word	0x40004400
 8002a74:	40004800 	.word	0x40004800
 8002a78:	40004c00 	.word	0x40004c00
 8002a7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80fa 	beq.w	8002c88 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d305      	bcc.n	8002ab0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d903      	bls.n	8002ab8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ab6:	e0e7      	b.n	8002c88 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2200      	movs	r2, #0
 8002abc:	461c      	mov	r4, r3
 8002abe:	4615      	mov	r5, r2
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	022b      	lsls	r3, r5, #8
 8002aca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ace:	0222      	lsls	r2, r4, #8
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	6849      	ldr	r1, [r1, #4]
 8002ad4:	0849      	lsrs	r1, r1, #1
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	4688      	mov	r8, r1
 8002ada:	4681      	mov	r9, r0
 8002adc:	eb12 0a08 	adds.w	sl, r2, r8
 8002ae0:	eb43 0b09 	adc.w	fp, r3, r9
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002af2:	4650      	mov	r0, sl
 8002af4:	4659      	mov	r1, fp
 8002af6:	f7fd fb75 	bl	80001e4 <__aeabi_uldivmod>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4613      	mov	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b08:	d308      	bcc.n	8002b1c <UART_SetConfig+0x380>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b10:	d204      	bcs.n	8002b1c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e0b5      	b.n	8002c88 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b22:	e0b1      	b.n	8002c88 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2c:	d15d      	bne.n	8002bea <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d827      	bhi.n	8002b86 <UART_SetConfig+0x3ea>
 8002b36:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <UART_SetConfig+0x3a0>)
 8002b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3c:	08002b61 	.word	0x08002b61
 8002b40:	08002b69 	.word	0x08002b69
 8002b44:	08002b71 	.word	0x08002b71
 8002b48:	08002b87 	.word	0x08002b87
 8002b4c:	08002b77 	.word	0x08002b77
 8002b50:	08002b87 	.word	0x08002b87
 8002b54:	08002b87 	.word	0x08002b87
 8002b58:	08002b87 	.word	0x08002b87
 8002b5c:	08002b7f 	.word	0x08002b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b60:	f7ff f950 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002b64:	61f8      	str	r0, [r7, #28]
        break;
 8002b66:	e014      	b.n	8002b92 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b68:	f7ff f962 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8002b6c:	61f8      	str	r0, [r7, #28]
        break;
 8002b6e:	e010      	b.n	8002b92 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <UART_SetConfig+0x508>)
 8002b72:	61fb      	str	r3, [r7, #28]
        break;
 8002b74:	e00d      	b.n	8002b92 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b76:	f7ff f8ad 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8002b7a:	61f8      	str	r0, [r7, #28]
        break;
 8002b7c:	e009      	b.n	8002b92 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b82:	61fb      	str	r3, [r7, #28]
        break;
 8002b84:	e005      	b.n	8002b92 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d077      	beq.n	8002c88 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005a      	lsls	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	441a      	add	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d916      	bls.n	8002be2 <UART_SetConfig+0x446>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d212      	bcs.n	8002be2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f023 030f 	bic.w	r3, r3, #15
 8002bc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	8afb      	ldrh	r3, [r7, #22]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	8afa      	ldrh	r2, [r7, #22]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	e052      	b.n	8002c88 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002be8:	e04e      	b.n	8002c88 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d827      	bhi.n	8002c42 <UART_SetConfig+0x4a6>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <UART_SetConfig+0x45c>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c25 	.word	0x08002c25
 8002c00:	08002c2d 	.word	0x08002c2d
 8002c04:	08002c43 	.word	0x08002c43
 8002c08:	08002c33 	.word	0x08002c33
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c43 	.word	0x08002c43
 8002c14:	08002c43 	.word	0x08002c43
 8002c18:	08002c3b 	.word	0x08002c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff f8f2 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8002c20:	61f8      	str	r0, [r7, #28]
        break;
 8002c22:	e014      	b.n	8002c4e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c24:	f7ff f904 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8002c28:	61f8      	str	r0, [r7, #28]
        break;
 8002c2a:	e010      	b.n	8002c4e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <UART_SetConfig+0x508>)
 8002c2e:	61fb      	str	r3, [r7, #28]
        break;
 8002c30:	e00d      	b.n	8002c4e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c32:	f7ff f84f 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8002c36:	61f8      	str	r0, [r7, #28]
        break;
 8002c38:	e009      	b.n	8002c4e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c3e:	61fb      	str	r3, [r7, #28]
        break;
 8002c40:	e005      	b.n	8002c4e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d019      	beq.n	8002c88 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	085a      	lsrs	r2, r3, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	441a      	add	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	d909      	bls.n	8002c82 <UART_SetConfig+0x4e6>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d205      	bcs.n	8002c82 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e002      	b.n	8002c88 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00f42400 	.word	0x00f42400

08002ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01a      	beq.n	8002dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da6:	d10a      	bne.n	8002dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dfc:	f7fd ff32 	bl	8000c64 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d10e      	bne.n	8002e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f82d 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e023      	b.n	8002e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d10e      	bne.n	8002e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f817 	bl	8002e7e <UART_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e00d      	b.n	8002e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b09c      	sub	sp, #112	; 0x70
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8e:	e0a5      	b.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	f000 80a1 	beq.w	8002fdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7fd fee3 	bl	8000c64 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13e      	bne.n	8002f2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e6      	bne.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3308      	adds	r3, #8
 8002f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e5      	bne.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e067      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d04f      	beq.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4a:	d147      	bne.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e6      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	613b      	str	r3, [r7, #16]
   return(result);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fa8:	623a      	str	r2, [r7, #32]
 8002faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	69f9      	ldr	r1, [r7, #28]
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e010      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f43f af4a 	beq.w	8002e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3770      	adds	r7, #112	; 0x70
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_ZNSaIcEC1Ev>:
 8003006:	4770      	bx	lr

08003008 <_ZNSaIcED1Ev>:
 8003008:	4770      	bx	lr

0800300a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800300a:	b10a      	cbz	r2, 8003010 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800300c:	f000 b8d0 	b.w	80031b0 <memcpy>
 8003010:	4770      	bx	lr
	...

08003014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003014:	b508      	push	{r3, lr}
 8003016:	680b      	ldr	r3, [r1, #0]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d302      	bcc.n	8003024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003020:	f000 f880 	bl	8003124 <_ZSt20__throw_length_errorPKc>
 8003024:	4293      	cmp	r3, r2
 8003026:	d90b      	bls.n	8003040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003028:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800302c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003030:	d206      	bcs.n	8003040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003032:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003036:	bf2a      	itet	cs
 8003038:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800303c:	6008      	strcc	r0, [r1, #0]
 800303e:	600b      	strcs	r3, [r1, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	3001      	adds	r0, #1
 8003044:	d501      	bpl.n	800304a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003046:	f000 f867 	bl	8003118 <_ZSt17__throw_bad_allocv>
 800304a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800304e:	f000 b852 	b.w	80030f6 <_Znwj>
 8003052:	bf00      	nop
 8003054:	08003450 	.word	0x08003450

08003058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003058:	2a01      	cmp	r2, #1
 800305a:	b410      	push	{r4}
 800305c:	d104      	bne.n	8003068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800305e:	780a      	ldrb	r2, [r1, #0]
 8003060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003064:	7002      	strb	r2, [r0, #0]
 8003066:	4770      	bx	lr
 8003068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800306c:	f7ff bfcd 	b.w	800300a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08003070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003070:	b508      	push	{r3, lr}
 8003072:	1a52      	subs	r2, r2, r1
 8003074:	f7ff fff0 	bl	8003058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003078:	bd08      	pop	{r3, pc}

0800307a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800307a:	6840      	ldr	r0, [r0, #4]
 800307c:	4770      	bx	lr

0800307e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800307e:	6800      	ldr	r0, [r0, #0]
 8003080:	4770      	bx	lr
	...

08003084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003084:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003086:	4604      	mov	r4, r0
 8003088:	4616      	mov	r6, r2
 800308a:	460d      	mov	r5, r1
 800308c:	b919      	cbnz	r1, 8003096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800308e:	b112      	cbz	r2, 8003096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8003092:	f000 f844 	bl	800311e <_ZSt19__throw_logic_errorPKc>
 8003096:	1b73      	subs	r3, r6, r5
 8003098:	2b0f      	cmp	r3, #15
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	d907      	bls.n	80030ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800309e:	2200      	movs	r2, #0
 80030a0:	a901      	add	r1, sp, #4
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff ffb6 	bl	8003014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80030a8:	9b01      	ldr	r3, [sp, #4]
 80030aa:	6020      	str	r0, [r4, #0]
 80030ac:	60a3      	str	r3, [r4, #8]
 80030ae:	4632      	mov	r2, r6
 80030b0:	4629      	mov	r1, r5
 80030b2:	6820      	ldr	r0, [r4, #0]
 80030b4:	f7ff ffdc 	bl	8003070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80030b8:	9b01      	ldr	r3, [sp, #4]
 80030ba:	6822      	ldr	r2, [r4, #0]
 80030bc:	6063      	str	r3, [r4, #4]
 80030be:	2100      	movs	r1, #0
 80030c0:	54d1      	strb	r1, [r2, r3]
 80030c2:	b002      	add	sp, #8
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	bf00      	nop
 80030c8:	08003468 	.word	0x08003468

080030cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	f100 0308 	add.w	r3, r0, #8
 80030d2:	4604      	mov	r4, r0
 80030d4:	6003      	str	r3, [r0, #0]
 80030d6:	460d      	mov	r5, r1
 80030d8:	b159      	cbz	r1, 80030f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80030da:	4608      	mov	r0, r1
 80030dc:	f7fd f87a 	bl	80001d4 <strlen>
 80030e0:	182a      	adds	r2, r5, r0
 80030e2:	4620      	mov	r0, r4
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7ff ffcb 	bl	8003084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80030ee:	4620      	mov	r0, r4
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
 80030f2:	2201      	movs	r2, #1
 80030f4:	e7f5      	b.n	80030e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080030f6 <_Znwj>:
 80030f6:	2801      	cmp	r0, #1
 80030f8:	bf38      	it	cc
 80030fa:	2001      	movcc	r0, #1
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	4620      	mov	r0, r4
 8003102:	f000 f84d 	bl	80031a0 <malloc>
 8003106:	b930      	cbnz	r0, 8003116 <_Znwj+0x20>
 8003108:	f000 f810 	bl	800312c <_ZSt15get_new_handlerv>
 800310c:	b908      	cbnz	r0, 8003112 <_Znwj+0x1c>
 800310e:	f000 f815 	bl	800313c <abort>
 8003112:	4780      	blx	r0
 8003114:	e7f4      	b.n	8003100 <_Znwj+0xa>
 8003116:	bd10      	pop	{r4, pc}

08003118 <_ZSt17__throw_bad_allocv>:
 8003118:	b508      	push	{r3, lr}
 800311a:	f000 f80f 	bl	800313c <abort>

0800311e <_ZSt19__throw_logic_errorPKc>:
 800311e:	b508      	push	{r3, lr}
 8003120:	f000 f80c 	bl	800313c <abort>

08003124 <_ZSt20__throw_length_errorPKc>:
 8003124:	b508      	push	{r3, lr}
 8003126:	f000 f809 	bl	800313c <abort>
	...

0800312c <_ZSt15get_new_handlerv>:
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <_ZSt15get_new_handlerv+0xc>)
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	f3bf 8f5b 	dmb	ish
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000118 	.word	0x20000118

0800313c <abort>:
 800313c:	b508      	push	{r3, lr}
 800313e:	2006      	movs	r0, #6
 8003140:	f000 f918 	bl	8003374 <raise>
 8003144:	2001      	movs	r0, #1
 8003146:	f7fd fca1 	bl	8000a8c <_exit>
	...

0800314c <__errno>:
 800314c:	4b01      	ldr	r3, [pc, #4]	; (8003154 <__errno+0x8>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4d0d      	ldr	r5, [pc, #52]	; (8003190 <__libc_init_array+0x38>)
 800315c:	4c0d      	ldr	r4, [pc, #52]	; (8003194 <__libc_init_array+0x3c>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	2600      	movs	r6, #0
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	4d0b      	ldr	r5, [pc, #44]	; (8003198 <__libc_init_array+0x40>)
 800316a:	4c0c      	ldr	r4, [pc, #48]	; (800319c <__libc_init_array+0x44>)
 800316c:	f000 f92c 	bl	80033c8 <_init>
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	2600      	movs	r6, #0
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	f855 3b04 	ldr.w	r3, [r5], #4
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	0800349c 	.word	0x0800349c
 8003194:	0800349c 	.word	0x0800349c
 8003198:	0800349c 	.word	0x0800349c
 800319c:	080034a0 	.word	0x080034a0

080031a0 <malloc>:
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <malloc+0xc>)
 80031a2:	4601      	mov	r1, r0
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	f000 b839 	b.w	800321c <_malloc_r>
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <memcpy>:
 80031b0:	440a      	add	r2, r1
 80031b2:	4291      	cmp	r1, r2
 80031b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031b8:	d100      	bne.n	80031bc <memcpy+0xc>
 80031ba:	4770      	bx	lr
 80031bc:	b510      	push	{r4, lr}
 80031be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c6:	4291      	cmp	r1, r2
 80031c8:	d1f9      	bne.n	80031be <memcpy+0xe>
 80031ca:	bd10      	pop	{r4, pc}

080031cc <memset>:
 80031cc:	4402      	add	r2, r0
 80031ce:	4603      	mov	r3, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <sbrk_aligned>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4e0e      	ldr	r6, [pc, #56]	; (8003218 <sbrk_aligned+0x3c>)
 80031e0:	460c      	mov	r4, r1
 80031e2:	6831      	ldr	r1, [r6, #0]
 80031e4:	4605      	mov	r5, r0
 80031e6:	b911      	cbnz	r1, 80031ee <sbrk_aligned+0x12>
 80031e8:	f000 f88c 	bl	8003304 <_sbrk_r>
 80031ec:	6030      	str	r0, [r6, #0]
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f887 	bl	8003304 <_sbrk_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	d00a      	beq.n	8003210 <sbrk_aligned+0x34>
 80031fa:	1cc4      	adds	r4, r0, #3
 80031fc:	f024 0403 	bic.w	r4, r4, #3
 8003200:	42a0      	cmp	r0, r4
 8003202:	d007      	beq.n	8003214 <sbrk_aligned+0x38>
 8003204:	1a21      	subs	r1, r4, r0
 8003206:	4628      	mov	r0, r5
 8003208:	f000 f87c 	bl	8003304 <_sbrk_r>
 800320c:	3001      	adds	r0, #1
 800320e:	d101      	bne.n	8003214 <sbrk_aligned+0x38>
 8003210:	f04f 34ff 	mov.w	r4, #4294967295
 8003214:	4620      	mov	r0, r4
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	20000120 	.word	0x20000120

0800321c <_malloc_r>:
 800321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003220:	1ccd      	adds	r5, r1, #3
 8003222:	f025 0503 	bic.w	r5, r5, #3
 8003226:	3508      	adds	r5, #8
 8003228:	2d0c      	cmp	r5, #12
 800322a:	bf38      	it	cc
 800322c:	250c      	movcc	r5, #12
 800322e:	2d00      	cmp	r5, #0
 8003230:	4607      	mov	r7, r0
 8003232:	db01      	blt.n	8003238 <_malloc_r+0x1c>
 8003234:	42a9      	cmp	r1, r5
 8003236:	d905      	bls.n	8003244 <_malloc_r+0x28>
 8003238:	230c      	movs	r3, #12
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	2600      	movs	r6, #0
 800323e:	4630      	mov	r0, r6
 8003240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003244:	4e2e      	ldr	r6, [pc, #184]	; (8003300 <_malloc_r+0xe4>)
 8003246:	f000 f8b1 	bl	80033ac <__malloc_lock>
 800324a:	6833      	ldr	r3, [r6, #0]
 800324c:	461c      	mov	r4, r3
 800324e:	bb34      	cbnz	r4, 800329e <_malloc_r+0x82>
 8003250:	4629      	mov	r1, r5
 8003252:	4638      	mov	r0, r7
 8003254:	f7ff ffc2 	bl	80031dc <sbrk_aligned>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	4604      	mov	r4, r0
 800325c:	d14d      	bne.n	80032fa <_malloc_r+0xde>
 800325e:	6834      	ldr	r4, [r6, #0]
 8003260:	4626      	mov	r6, r4
 8003262:	2e00      	cmp	r6, #0
 8003264:	d140      	bne.n	80032e8 <_malloc_r+0xcc>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	4631      	mov	r1, r6
 800326a:	4638      	mov	r0, r7
 800326c:	eb04 0803 	add.w	r8, r4, r3
 8003270:	f000 f848 	bl	8003304 <_sbrk_r>
 8003274:	4580      	cmp	r8, r0
 8003276:	d13a      	bne.n	80032ee <_malloc_r+0xd2>
 8003278:	6821      	ldr	r1, [r4, #0]
 800327a:	3503      	adds	r5, #3
 800327c:	1a6d      	subs	r5, r5, r1
 800327e:	f025 0503 	bic.w	r5, r5, #3
 8003282:	3508      	adds	r5, #8
 8003284:	2d0c      	cmp	r5, #12
 8003286:	bf38      	it	cc
 8003288:	250c      	movcc	r5, #12
 800328a:	4629      	mov	r1, r5
 800328c:	4638      	mov	r0, r7
 800328e:	f7ff ffa5 	bl	80031dc <sbrk_aligned>
 8003292:	3001      	adds	r0, #1
 8003294:	d02b      	beq.n	80032ee <_malloc_r+0xd2>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	442b      	add	r3, r5
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	e00e      	b.n	80032bc <_malloc_r+0xa0>
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	1b52      	subs	r2, r2, r5
 80032a2:	d41e      	bmi.n	80032e2 <_malloc_r+0xc6>
 80032a4:	2a0b      	cmp	r2, #11
 80032a6:	d916      	bls.n	80032d6 <_malloc_r+0xba>
 80032a8:	1961      	adds	r1, r4, r5
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	6025      	str	r5, [r4, #0]
 80032ae:	bf18      	it	ne
 80032b0:	6059      	strne	r1, [r3, #4]
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	bf08      	it	eq
 80032b6:	6031      	streq	r1, [r6, #0]
 80032b8:	5162      	str	r2, [r4, r5]
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	4638      	mov	r0, r7
 80032be:	f104 060b 	add.w	r6, r4, #11
 80032c2:	f000 f879 	bl	80033b8 <__malloc_unlock>
 80032c6:	f026 0607 	bic.w	r6, r6, #7
 80032ca:	1d23      	adds	r3, r4, #4
 80032cc:	1af2      	subs	r2, r6, r3
 80032ce:	d0b6      	beq.n	800323e <_malloc_r+0x22>
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	50a3      	str	r3, [r4, r2]
 80032d4:	e7b3      	b.n	800323e <_malloc_r+0x22>
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	42a3      	cmp	r3, r4
 80032da:	bf0c      	ite	eq
 80032dc:	6032      	streq	r2, [r6, #0]
 80032de:	605a      	strne	r2, [r3, #4]
 80032e0:	e7ec      	b.n	80032bc <_malloc_r+0xa0>
 80032e2:	4623      	mov	r3, r4
 80032e4:	6864      	ldr	r4, [r4, #4]
 80032e6:	e7b2      	b.n	800324e <_malloc_r+0x32>
 80032e8:	4634      	mov	r4, r6
 80032ea:	6876      	ldr	r6, [r6, #4]
 80032ec:	e7b9      	b.n	8003262 <_malloc_r+0x46>
 80032ee:	230c      	movs	r3, #12
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4638      	mov	r0, r7
 80032f4:	f000 f860 	bl	80033b8 <__malloc_unlock>
 80032f8:	e7a1      	b.n	800323e <_malloc_r+0x22>
 80032fa:	6025      	str	r5, [r4, #0]
 80032fc:	e7de      	b.n	80032bc <_malloc_r+0xa0>
 80032fe:	bf00      	nop
 8003300:	2000011c 	.word	0x2000011c

08003304 <_sbrk_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d06      	ldr	r5, [pc, #24]	; (8003320 <_sbrk_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fbc6 	bl	8000aa0 <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_sbrk_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_sbrk_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000124 	.word	0x20000124

08003324 <_raise_r>:
 8003324:	291f      	cmp	r1, #31
 8003326:	b538      	push	{r3, r4, r5, lr}
 8003328:	4604      	mov	r4, r0
 800332a:	460d      	mov	r5, r1
 800332c:	d904      	bls.n	8003338 <_raise_r+0x14>
 800332e:	2316      	movs	r3, #22
 8003330:	6003      	str	r3, [r0, #0]
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800333a:	b112      	cbz	r2, 8003342 <_raise_r+0x1e>
 800333c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003340:	b94b      	cbnz	r3, 8003356 <_raise_r+0x32>
 8003342:	4620      	mov	r0, r4
 8003344:	f000 f830 	bl	80033a8 <_getpid_r>
 8003348:	462a      	mov	r2, r5
 800334a:	4601      	mov	r1, r0
 800334c:	4620      	mov	r0, r4
 800334e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003352:	f000 b817 	b.w	8003384 <_kill_r>
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00a      	beq.n	8003370 <_raise_r+0x4c>
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	d103      	bne.n	8003366 <_raise_r+0x42>
 800335e:	2316      	movs	r3, #22
 8003360:	6003      	str	r3, [r0, #0]
 8003362:	2001      	movs	r0, #1
 8003364:	e7e7      	b.n	8003336 <_raise_r+0x12>
 8003366:	2400      	movs	r4, #0
 8003368:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800336c:	4628      	mov	r0, r5
 800336e:	4798      	blx	r3
 8003370:	2000      	movs	r0, #0
 8003372:	e7e0      	b.n	8003336 <_raise_r+0x12>

08003374 <raise>:
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <raise+0xc>)
 8003376:	4601      	mov	r1, r0
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	f7ff bfd3 	b.w	8003324 <_raise_r>
 800337e:	bf00      	nop
 8003380:	2000000c 	.word	0x2000000c

08003384 <_kill_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d07      	ldr	r5, [pc, #28]	; (80033a4 <_kill_r+0x20>)
 8003388:	2300      	movs	r3, #0
 800338a:	4604      	mov	r4, r0
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	602b      	str	r3, [r5, #0]
 8003392:	f7fd fb6b 	bl	8000a6c <_kill>
 8003396:	1c43      	adds	r3, r0, #1
 8003398:	d102      	bne.n	80033a0 <_kill_r+0x1c>
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	b103      	cbz	r3, 80033a0 <_kill_r+0x1c>
 800339e:	6023      	str	r3, [r4, #0]
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
 80033a2:	bf00      	nop
 80033a4:	20000124 	.word	0x20000124

080033a8 <_getpid_r>:
 80033a8:	f7fd bb58 	b.w	8000a5c <_getpid>

080033ac <__malloc_lock>:
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <__malloc_lock+0x8>)
 80033ae:	f000 b809 	b.w	80033c4 <__retarget_lock_acquire_recursive>
 80033b2:	bf00      	nop
 80033b4:	20000128 	.word	0x20000128

080033b8 <__malloc_unlock>:
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <__malloc_unlock+0x8>)
 80033ba:	f000 b804 	b.w	80033c6 <__retarget_lock_release_recursive>
 80033be:	bf00      	nop
 80033c0:	20000128 	.word	0x20000128

080033c4 <__retarget_lock_acquire_recursive>:
 80033c4:	4770      	bx	lr

080033c6 <__retarget_lock_release_recursive>:
 80033c6:	4770      	bx	lr

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
